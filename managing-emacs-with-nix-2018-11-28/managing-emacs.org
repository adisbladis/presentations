#+TITLE:     Nix - Managing emacs environments with Nix
#+AUTHOR:    Adam Hose
#+EMAIL:     adisbladis@gmail.com
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [presentation]
#+BEAMER_FRAME_LEVEL: 1
#+BEAMER_HEADER_EXTRA: \usetheme{default}\usecolortheme{default}
#+COLUMNS: %45ITEM %10BEAMER_env(Env) %10BEAMER_envargs(Env Args) %4BEAMER_col(Col) %8BEAMER_extra(Extra)
#+PROPERTY: BEAMER_col_ALL 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 :ETC


* Introduction
** Who am I?
*** Who am I?
- UNIX lover who lives inside Emacs
- I'm working as a Devops Engineer at Tweag I/O in London
- First used Nix back in 2015
- NixOS member since 2017

** Nix - what is it?
*** Nix - what is it?
- A package manager
- A build system
- A language (DSL for package management)

** Package management
*** What do we expect from package managers?
- Manages software builds
  - Build manifests
- Manages package repositories
  - Debian: universe/multiverse/non-free
  - Elpa/Melpa
- Create redistributable packages
- Dependency management
- Upgrades/downgrades

*** Problems with traditional package management
- Underspecified dependencies
  - E.g. Program =x= _actually_ depends on =y= but not in the manifest
  - Package =x= depends on native dependency =y= (not handled by =M-x package-install=)
- Rolling back?
  - No atomicity (state limbo)
- Major upgrades
  - Often breaks entirely
  - Broken ABIs
- Trust but verify
  - =nix-build --check=
- Cross compilation

*** How nix deals with these issues
- No unspecified dependencies
  - Dependency not in inputs? Not available at build time.
- Immutable package store
  - No more in-place upgrades
- Atomic installs/uninstalls/upgrades/downgrades
  - Using symlinks/environment variables
- Pure package builds

*** Nixpkgs - The packages
- Available on Github
  https://github.com/nixos/nixpkgs
- Huge package tree
More packages than Debian/Ubuntu/Arch
- Very up to date
Packages are ~85% up to date
- Mostly free software
- Accepts unfree packages (but must be user enabled)
- Pull request based workflow on Github
  - Around 300-400 monthly contributors
  - Last week we saw ~500 commits from ~130 authors
- Some fully autogenerated ecosystems
  - Emacs(!).
    - Elpa/Melpa/Org
      With separation of melpa stable
  - Haskell
- Comes with lots of abstractions
  - Language specific
  - Source fetchers
  - Library functionality

* Nix

** Nix - An introduction

*** Nix - An introduction
- Reproducible deterministic builds
  - Easier to debug
  - No more "works on my machine"
- Packages built in isolation (sandboxed)
  - Only specified inputs are available
- All inputs are hashed
  - If any input changes it is considered to be a distinct evaluation
- All outputs are stored by hash
=/nix/store/<hash>-packagename-version/=
- Source based with binary cache
- Unprivileged installs
- Both Linux ( =x86_64= / =aarch64= ) and =OSX= are fully supported

** Nix - the language

*** Nix - the language
- Purely functional
  - Always returns the same answer given the same inputs
  - Evaluation has no side effects
- Lazy eval - Like Haskell!
  - A good fit for package trees where you want to go from a few leafs (user installed packages) to many dependencies
- Untyped - With a few exceptions
  - paths, urls, bool, int, lists, functions and attrsets
- Lambda calculus based syntax

*** Nix - the language
- Hello world
#+begin_src nix
let
  name = "Emacs Stockholm";
"Hello ${name}"
#+end_src

- Functions
#+begin_src nix
let
  fn = (a: b: a + b);
in fn 5 5
#+end_src

- Expressions
#+begin_src nix
let
  x = if x > 5 then x else throw "x is too small";
in x 5
#+end_src

*** Nix - the language
- Attribue sets (maps)
#+begin_src nix
{
  foo="bar";
}
#+end_src

- Lists
#+begin_src nix
[ "foo" "bar" ]
#+end_src

- Currying (partial application)
#+begin_src nix
let
  mul = (a: b: a * b);
  mul5 = mul 5;
in mul5 5;
#+end_src

*** Nix - The build system
- Clear separation between build time and runtime
- Each package is composed of a =derivation=
  - A derivation is the package description
  - Lists all input =derivations= (packages)
  - A =derivation= can depend on one or more =outputs=
- One build results in one or more =outputs=
  - =dev=
  - =man=
  - =bin=
  - =out=

*** Nix - The build process
=/nix/store/= *2i4vyzq4i9j7l8d2g3fdal97h4mi5sy3* =-openssh-7.7/=
- The OpenSSH derivation + _all_ of it's input are instantiated
- A hash is calculated over the instantiated derivation
- A nix build environment (sandbox) is created for the package
- Each build =phase= from the derivation runs.
  =unpackPhase=, =patchPhase=, =buildPhase=, =installPhase=, etc
- All binaries are patched
  - Shared libraries point to absolute store path
  - Shebangs are patched
- Package is being written to the nix store

*** Nix - installing packages
- Install a package into your user profile
#+begin_src sh
nix-env -iA nixpkgs.emacs
#+end_src

- Global package installs
#+begin_src nix
# /etc/nixos/configuration.nix
environment.systemPackages = [
  pkgs.emacs
];
#+end_src

*** Nix - magical superpowers
- Start a new shell with a package
#+begin_src shell
nix-shell -p emacs25
#+end_src

- Magical superpowers
#+begin_src shell
nix-shell -p 'python3.withPackages(ps: with ps; [
  ipython tensorflow numpy requests
])' --run ipython
#+end_src

*** Nix - magical superpowers
- Self-documenting scripts
#+begin_src python
#!/usr/bin/env nix-shell
#! nix-shell -i python3 -p python3 python3Packages.requests
import requests

if __name__ == '__main__':
    print(requests.get('https://www.gnu.org'))
#+end_src

*** Nix - magical superpowers
- Overrides are a breeze
#+LATEX: \scriptsize
#+begin_src nix
somePackage.overrideAttrs(oldAttrs: {
  name = "overriden-${oldAttrs.version}";

  buildInputs = oldAttrs.buildInputs ++ [ pkgs.poppler ];

  patches = [ (fetchpatch {
    url = "https://github.com/path/to.patch";
    sha256 = "1n1x1f7xgci7wqm0xjbxxlxxd1kq3866a3xnv7dfz2512z6051fw";
  }) ];
})
#+end_src

* Managing your emacs env/configuration

** Managing your emacs configuration - Raw nix style
*** Managing your emacs configuration - Raw nix style
#+begin_src nix
with import <nixpkgs> {};

let
  # Decide which emacs package we want to use
  package = emacs26;
  # Get the emacs packages attribute sets
  emacsPackages = emacsPackagesNgGen package;
  # Assign the function that we will use to create our env
  emacsWithPackages = emacsPackages.emacsWithPackages;
# Finally, create the environment
in emacsWithPackages (epkgs: [ epkgs.magit ])
#+end_src

*** Managing your emacs configuration - Raw nix style (nix-shell)
#+begin_src nix
with import <nixpkgs>;

let
  emacsEnv = emacsWithPackages (epkgs: with epkgs; [
    pdf-tools
    magit
  ]);
in mkShell {
  buildInputs = [ emacsEnv ];
  shellHook = ''
    export EDITOR=${emacsEnv}/bin/emacs
  '';
}
#+end_src

** Nixos style
*** NixOS style
#+begin_src nix
# Note: Makes systemd user service
{ config, pkgs, ...}:
{
  services.emacs = {
    enable = true;
    defaultEditor = true;
    package = (emacsWithPackages (epkgs: with epkgs; [
      pdf-tools
      magit
    ]));
  };
}
#+end_src

** Home-manager
*** Home-manager
- Home-manager is a tool for managing user environments with Nix
- It's like NixOS but for user envs
  - Manage services/dotfiles
- Should work on /most/ distros
- But is of course best together with NixOS
- Use either standalone (=home-manager switch=) or as a NixOS module (=nixos-rebuild switch=)

*** Home-manager
#+LATEX: \scriptsize
#+begin_src nix
{ pkgs, ... }:
{
  home.file.".emacs".source = pkgs.runCommand "config.el" {} ''
    cp ${./dotfiles/emacs/config.org} config.org
    ${pkgs.emacs}/bin/emacs --batch ./config.org -f org-babel-tangle
    mv config.el $out
  '';
  home.sessionVariables.EDITOR = "emacsclient";
    programs.emacs = {
      enable = true;
      package = emacs26;
      extraPackages = epkgs: with epkgs; [
        webpaste
        go-mode
        exwm
      ];
  };
}
#+end_src

* Blending emacs and nix
** Blending emacs and nix
*** Blending emacs and nix
- =direnv= - load an environment from =.envrc=
- =emacs-direv= - integrate this into emacs
- Direnv supports nix!
=.envrc=
#+begin_src bash
use nix
#+end_src
=shell.nix=
#+begin_src nix
with import <nixpkgs> {};
mkShell { buildInputs = [ golint ]; }
#+end_src

* Cool side-notes
** Cool side-notes
*** Cool side-notes
- Nix is used and contributed to by Emacs maintainers (John Wiegley & others)
- Emacs uses Hydra - the NixOS CI
- There is a GNU distribution based on the same principles called =GuixSD=
  - Using Guile (scheme) as it's configuration language

* Takeaways
*** Takeaways
- Have a rough idea of the Nix/Emacs ecosystem
- Know how to start using Nix
- Understand why the Nix Way is the future of package management
- Managing emacs with nix makes your life easier and more awesome

*** Show and tell time!

*** Questions?
[[./nixos-gnu.png]]
